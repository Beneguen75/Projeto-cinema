version: '3.8'

services:
  frontend:
    build:
      context: ./frontend # Aponta para a pasta do frontend
      dockerfile: Dockerfile
    container_name: cinema-frontend
    ports:
      # Mapeia a porta 5173 da sua máquina para a porta 80 do container
      # Assim você continua acessando o site em http://localhost:5173
      - "5173:80"
  backend:
    build:
      context: ./backend # Aponta para a pasta do nosso backend
      dockerfile: Dockerfile # Usaremos um Dockerfile para construir a imagem
    container_name: cinema-backend
    command: npm run start:dev
    ports:
      - "3000:3000" # Mapeia a porta 3000 do container para a porta 3000 da sua máquina
    volumes:
      - ./backend:/usr/src/app # Sincroniza os arquivos locais com os do container
      - /usr/src/app/node_modules # Evita que a node_modules local sobrescreva a do container
    depends_on:
      - db # Garante que o banco de dados inicie antes do backend
    environment:
      # Variáveis de ambiente que o NestJS e o Prisma usarão para conectar ao banco
      DATABASE_URL: "postgresql://user:password@db:5432/cinema_db?schema=public"

  # Serviço para o banco de dados PostgreSQL
  db:
    image: postgres:15 # Usa a imagem oficial do PostgreSQL versão 15
    container_name: cinema-db
    environment:
      # Define o usuário, senha e nome do banco de dados
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: cinema_db
    ports:
      - "5432:5432" # Mapeia a porta do banco para a sua máquina (para acesso externo, se necessário)
    volumes:
      - postgres_data:/var/lib/postgresql/data # Garante que os dados do banco persistam

  # Serviço para o Adminer (ferramenta visual para gerenciar o banco) - Opcional, mas recomendado
  adminer:
    image: adminer
    container_name: cinema-adminer
    ports:
      - "8080:8080" # Acesse o Adminer em http://localhost:8080
    depends_on:
      - db

volumes:
  # Define o volume para persistência dos dados do PostgreSQL
  postgres_data: